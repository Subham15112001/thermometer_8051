org 0000H;reset address	
SJMP start

org 0003H;address for interupt INT0
LJMP get_value_from_adc

start:		
	MOV R0,#00H;will act as pointer to string array
	MOV DPTR,#str;hold the string temperatue
	MOV R7,#0DH;size of string 
	
;standard cmd function for lcd	
setup_display:
	MOV A,#38H;2 lines and 5×7 matrix
	LCALL cmd
	MOV A,#0CH;Display on, cursor off
	LCALL cmd
	MOV A,#01H;Clear display screen
	LCALL cmd
	MOV A,#06H;move cursor to right
	LCALL cmd
	MOV A,#80H;Force cursor to the beginning
	LCALL cmd
	LJMP display

send_to_adc:
    CLR P3.1;low value,WR pin
	NOP
	NOP
	NOP
	SETB P3.1;high value in this way we can send low to high value signal=>edge signal
	here:JNB TCON.1,here;wait for interupt
	LCALL get_value_from_adc
	CLR TCON.1
    SJMP send_to_adc ;keep sending till we get an interupt
	
	
get_value_from_adc:
        CLR P3.0;get value... read point 0 active low
		MOV A,#00H
		MOV A,P1;to A
	    ;MOV B,#06H;multiplying factor
		;MUL AB
		CLR C
		ADD A,#01H
		CLR C
		SUBB A,#01H
        DA A;decimal adjust after add hex to decimal form
		
		MOV R1,#7FH;initialise new array pointer
		MOV R7,#05H;size of loop 
		LCALL initialise_array;extremely important or else after sometime lcd get filled with random value
		                      ;propbably because of stack pointer,due to large size program
		
		MOV R1,#7FH;initialise new array pointer
		
	    LCALL construct_array
		
		MOV R1,#7FH;initial memory pointer of R1
		MOV R7,#05H;size of loop 
		
		MOV A,#0C0H;Force cursor to the beginning second line
	    LCALL cmd
        LCALL display1;show magnitude and unit of temperature
		LCALL delay
        SETB P3.0;set it so for next cycle again we can clr it to get value
        RETI		
	
send_data:;standard code to insert data in a lcd screen
    LCALL delay
    MOV P2,A
	SETB P0.5;set rs pin to send data
	CLR P0.6;r/w 0 for write
	SETB P0.7;send content -> enable pin
	CLR P0.7;after sending clr it
	LCALL delay
	RET
	
cmd:;standard code to insert command in a lcd screen
    LCALL delay
    MOV P2,A
    CLR P0.5;rs pin
	CLR P0.6;read and write pin
	SETB P0.7;enable pin
	CLR P0.7
	LCALL delay
	RET
	
	;standard delay fucntion
delay:MOV TMOD,#01H;intialise delay mode 1 in timer 0,1ms
      MOV TL0,#0F0H;
      MOV TH0,#0D8H;
	  MOV TCON,#10H;start timer
wait:JNB TCON.5,wait
      CLR TCON.4;
      CLR TCON.5;
      RET	  

construct_array:
        MOV B,#10H
		DIV AB;lets say A=38 so after div ... A=3(quotient) and B=8(remainder)
		ADD A,#30H;convert A hex value to ascii value for lcd
		MOV @R1,A;give value to location point by R1
		INC R1;next memory location
		
		MOV A,B
		ADD A,#30H;same logic as above
		MOV @R1,A;same logic as above
		INC R1
		
		MOV A, #0DFH           ; Load ASCII value of degree symbol (°)
        MOV @R1,A          ; Display degree symbol
		INC R1
		
        MOV A, #43H              ; Load ASCII value of 'C'
        MOV @R1,A          ; Display degree symbol
		
 		RET

initialise_array:
        MOV @R1,#00H
		INC R1
		DJNZ R7,initialise_array
		RET
		
display1:;loop through data ro be send to lcd
        MOV A,@R1
		INC R1
		LCALL send_data
		DJNZ R7,display1
        LJMP send_to_adc;after completing loop go back to send_to_adc
		RET
		
		;loop through str 
display:MOV A,R0
        MOVC A,@A+DPTR
		LCALL send_data
		INC R0
		DJNZ R7,display
		MOV IE,#81H
        LJMP send_to_adc   
   		RET
		
str:DB'Temperature' 
	   
END	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
